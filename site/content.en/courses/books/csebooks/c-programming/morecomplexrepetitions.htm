---
title: 'More Complex Repetitions'


---

<div class="slides">
    <!-- slide 1 content -->
    <section
        data-background-image="https://images-wixmp-ed30a86b8c4ca887773594c2.wixmp.com/f/fd7a6d61-451a-47d5-9835-13be03bc7584/dc514w3-06ec514c-75ce-49ae-af8c-da3daf6373f3.png/v1/fill/w_960,h_560,strp/logo_infinity_loop_by_loleden_dc514w3-fullview.png?token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJ1cm46YXBwOiIsImlzcyI6InVybjphcHA6Iiwib2JqIjpbW3siaGVpZ2h0IjoiPD01NjAiLCJwYXRoIjoiXC9mXC9mZDdhNmQ2MS00NTFhLTQ3ZDUtOTgzNS0xM2JlMDNiYzc1ODRcL2RjNTE0dzMtMDZlYzUxNGMtNzVjZS00OWFlLWFmOGMtZGEzZGFmNjM3M2YzLnBuZyIsIndpZHRoIjoiPD05NjAifV1dLCJhdWQiOlsidXJuOnNlcnZpY2U6aW1hZ2Uub3BlcmF0aW9ucyJdfQ.pAfN0fNNXbd_cQtKdCqXdUcbRmRtLDzoOqtYGEvBbuU"
        data-auto-animate data-transition="convex">
        <h2>
            <p>
                More Complex Repetitions
            </p>
        </h2>
    </section>

    <!-- slide 2 content -->
    <section data-auto-animate data-transition="zoom">
        <h3><b>Introduction</b></h3>
        <ul>
            <li>In the Previous chapter we see how instructions in a program can be repeated using a while loop.
            </li>
            <li>This chapter explores the other two loops – for and do-while. </li>
            <li>There is more to looping than just repeating instructions. For example,</li>
            <ul>
                <li>To terminate the loop abruptly</li>
                <li> To skip some instructions</li>
                <li>To repeat something infinite times, unknown number of times,(or) only once.</li>
            </ul>
        </ul>
    </section>

    <!-- slide 3 content -->
    <section data-background-image="https://miro.medium.com/max/1400/1*zq262-x7OBb48afn8rWaVg.png" data-auto-animate
        data-background-size="737px" data-transition="convex">
        <h2>
            <p>
                For Loop
            </p>
        </h2>
    </section>

    <!-- slide 4 content -->
    <section data-background-image="https://cdn.programiz.com/sites/tutorial2program/files/python-for-loop.jpg"
        data-auto-animate data-background-size="737px" data-background-opacity="0.5" data-transition="convex">
        <h4><b>What is For Loop?</b></h4>
        <p>The for loop allows us to specify three things about the loop in single line:</p>
        <ol>
            <li>setting a loop counter to an initial value.</li>
            <li>Testing the loop counter to determine whether its value has reached the number of repetitions
                desired.</li>
            <li>Increasing the value of loop counter each time the body of the loop has been executed.</li>
        </ol>
    </section>

    <!-- slide 5 content -->
    <section data-background-image="https://cdn.programiz.com/sites/tutorial2program/files/python-for-loop.jpg"
        data-auto-animate data-background-size="737px" data-background-opacity="0.5" data-transition="convex">
        <h3><b>The General Form of For Loop is given below:-</b></h3>
        <h4>
            <pre>
        <code data-trim data-noescape>
          for(initialize counter ; test counter ; increment counter)
          {
            do this;
            and this;
            and this;
           }
        </code>
        </pre>
        </h4>
    </section>

    <!-- slide 6 content -->
    <section data-background-image="https://cdn.programiz.com/sites/tutorial2program/files/python-for-loop.jpg"
        data-auto-animate data-background-size="737px" data-background-opacity="0.5" data-transition="convex">
        <h3><b><u>Synatx of For Loop</b></h3>
        <h4>
            <pre>
        <code data-trim data-noescape>
        for ( initialization; condition; increment )
        {
          statement(s);
        }
            </code>
        </pre>
            <p><u>With example:-</p>
            <img src="https://www.sitesbay.com/cprogramming/images/for-loop-steps.png">
        </h4>
    </section>

    <!-- slide 7 content -->
    <section data-background-image="https://cdn.programiz.com/sites/tutorial2program/files/python-for-loop.jpg"
        data-auto-animate data-background-size="737px" data-background-opacity="0.5" data-transition="convex">
        <h3>
            <p><u>Flowchart of For Loop</p>
        </h3>
        <img src="https://beginnersbook.com/wp-content/uploads/2017/09/for_loop_C.jpg">
    </section>

    <!-- slide 8 content -->
    <section data-transition="convex">
        <h4>Let us now write down the simple interest program using for.Compare this program with the one that we
            wrote using while.</h4>
        <pre>
        <code data-trim data-noescape>
        #include &lt;stdio.h&gt;
        int main()
        {		
        int p, n, count;
        float r, si;

        for(count=1;count&lt;=3;count=count+1)
            {
        printf(“Enter values of p, n, and r”);
        scanf(“%d%d%f”,&p, &n, &r);
        si=p*n*r/100;
        printf(“Simple Interest = Rs.%f\n”,si );
            }
        return 0;
        }    
        </code>
        </pre>
    </section>

    <!-- slide 9 content -->
    <section data-background-image="https://cdn.programiz.com/sites/tutorial2program/files/python-for-loop.jpg"
        data-auto-animate data-background-size="737px" data-background-opacity="0.5" data-transition="convex">
        <p><u>Let us now examine how the for statement gets executed:</p>
        <ul>
            <li>When for statement is executed for the first time, the value of count is set to an initial value 1.
            </li>
            <li>Next the condition count&lt;=3 is tested. Since count is 1, the condition is satisfied and the body
                of the loop
                is executed for the first time.</li>
            <li>Upon reaching the closing brace of for , control is sent back to for statement, where the value of
                count gets incremented by 1.</li>
        </ul>
    </section>

    <!-- slide 10 content -->
    <section data-background-image="https://cdn.programiz.com/sites/tutorial2program/files/python-for-loop.jpg"
        data-auto-animate data-background-size="737px" data-background-opacity="0.5" data-transition="convex">
        <ul>
            <li>Again the test is performed to check whether the new value of count exceeds 3.</li>
            <li>If the value of count is less than or equal to 3, the statements within the braces of for are
                executed again.</li>
            <li>The body of for loop continues to get executed till count doesn’t exceed the final value 3.</li>
            <li>When count reaches the value 4, the control exists from the loop.</li>
        </ul>
        <p>The initialization, testing and incrementation part of a for loop can be replaced by any valid
            expression.</p>
    </section>

    <!-- slide 11 Content --->
    <section data-background-image="https://cdn.programiz.com/sites/tutorial2program/files/python-for-loop.jpg"
        data-auto-animate data-background-size="737px" data-background-opacity="0.5" data-transition="convex">
        <p><u>Lets see more fuctions of for loop</p>
        <pre>
        <code data-trim data-noescape>
    (a)
    #include &lt;stdio.h&gt;
    int main()
    {		
        int i;
        for(i=1;i&lt;=10;)
    {
    printf(“%d\n”,i );
    i=i+1;
    }
    return 0;
    }
    </code>
    </pre>
        <p>Here, the incrementation is done within the body of the for loop. In spite of this, the semicolon(;)
            after the condition is necessary.</p>
    </section>

    <!-- slide 12 Content --->
    <section data-background-image="https://cdn.programiz.com/sites/tutorial2program/files/python-for-loop.jpg"
        data-auto-animate data-background-size="737px" data-background-opacity="0.5" data-transition="convex">
        <pre>
        <code data-trim data-noescape>
    (b)
    #include &lt;stdio.h&gt;
    int main()	
    {		
        int i=1;
        for(; i&lt;=10;i=i+1)
        {
          printf(“%d\n”,i );
        }
     return 0;
    }
    </code>
    </pre>
        <p>Here the initialization is done in the declaration statement itself, but still the semicolon before the
            condition is necessary,</p>
    </section>

    <!-- slide 13 content -->
    <section data-background-image="https://cdn.programiz.com/sites/tutorial2program/files/python-for-loop.jpg"
        data-auto-animate data-background-size="737px" data-background-opacity="0.5" data-transition="convex">
        <h2>
            <p>
                Nesting of Loops
            </p>
        </h2>
    </section>

    <!-- slide 14 content -->
    <section data-auto-animate data-transition="convex">
        <h2>
            <p>
                What is Nesting..?
            </p>
        </h2>
        <img src="https://image.shutterstock.com/image-vector/empty-nest-branches-leaves-260nw-797078014.jpg">
    </section>


    <!-- slide 15 Content --->
    <section data-background-image="https://cdn.programiz.com/sites/tutorial2program/files/python-for-loop.jpg"
        data-auto-animate data-background-size="737px" data-background-opacity="0.5" data-transition="convex">
        <p>The way if statements can be nested, similarly while's and for's can also be nested.</p>
        <p>The following program
            shows how nested loops work.</p>
        <pre>
    <code data-trim data-noescape>
     #include &lt;stdio.h&gt;
     int main()
      {
         int r, c, sum;
         for (r=1; r&lt;=3; r++) /*outer loop*/
         {
          for (c=1; c&lt;=2; c++) /*inner loop*/
            {
              sum = r+c;
              printf(“r=%d c=%d sum = %d\n”, r, c, sum);
            }
        }
          return 0;
     }	    
                    
   </code>
    </pre>
    </section>

    <!-- slide 16 Content --->
    <section data-auto-animate data-transition="convex">
        <h2>
            <p>
                <u> Multiple Initializations in the for loop
            </p>
        </h2>
    </section>

    <!-- slide 17 Content --->
    <section data-background-image="https://cdn.programiz.com/sites/tutorial2program/files/python-for-loop.jpg"
        data-auto-animate data-background-size="737px" data-background-opacity="0.5" data-transition="convex">
        <ul>
            <li>
                The initialization expression in the for loop can contain more than one statement separated by a
                comma.
            </li>
            <li><u>For Example</li>
            <ul>
                <li>for(i=1,j=20; j>=10; j++)</li>
            </ul>
            <li>Multiple incrementations can also be done in a for loop. Similarly, multiple conditions are allowed
                in the test expression.</li>
            <li>These conditions should be linked together using logical operators && and /or ||.</li>
        </ul>
    </section>

    <!-- slide 17 Content --->
    <section data-auto-animate data-transition="convex">
        <h3>
            The Break Statement
        </h3>
    </section>

    <!-- slide 18 Content --->
    <section data-auto-animate data-transition="convex">
        <ul>
            <li>In some situations, we want to jump out of a loop instantly, without get back to the condition.</li>
            <li>The keyboard break allows us to do this.</li>
            <li>A break is usually associated with an if.</li>
            <li><u>Definition:-</li>
            <ul>
                <li>When break is encountered inside any loop, control automatically passes to the first statement
                    after
                    the loop.</li>
            </ul>
        </ul>
    </section>

    <!-- slide 19 content -->
    <section data-auto-animate data-transition="convex">
        <h4>
            <p><u>Flowchart for Break Statement</p>
        </h4>
        <img src="https://cdn.programiz.com/sites/tutorial2program/files/flowchart-break-statement.jpg" width="70%"
            height="500px">
    </section>

    <!-- slide 20 content -->
    <section data-auto-animate data-transition="convex">
        <h3>
            <p><u> Break Statement in while & For</p>
        </h3>
        <img src="https://cdn.programiz.com/sites/tutorial2program/files/how-break-statement-works.jpg">
    </section>

    <!-- slide 20 content -->
    <section data-auto-animate data-transition="convex">
        <h4>
            <p><u> Example Program for Break Statement</p>
        </h4>
        <pre>
       <code data-trim data-noescape>
        #include &lt;stdio.h&gt;
        int main()
        {
          int i=1, j=1;
           while(i++&lt;=100)
           {
             while(j++&lt;=200)
              {
                if(j==150)
                break;
                else
                printf("%d%d \n", i, j);
             }	
            }
         return 0;
        }
       </code>
     </pre>
    </section>

    <!-- slide 17 Content --->
    <section data-auto-animate data-transition="convex">
        <h3>
            The Continue Statement
        </h3>
    </section>

    <!-- slide 18 Content --->
    <section data-auto-animate data-transition="convex">
        <ul>
            <li>In some programming situations, we want to take the control to the beginning of the loop, bypassing
                the statements inside the loop, which have not yet been executed.</li>
            <li>The keyword continue allows us to do this.</li>
            <li>A continue is usually associated with an if.</li>
            <li><u>Definition:-</li>
            <ul>
                <li>when continue is encountered inside any loop, control automatically passes to the beginning of
                    the loop.</li>
            </ul>
        </ul>
    </section>

    <!-- slide 19 content -->
    <section data-auto-animate data-transition="convex">
        <h4>
            <p><u>Flowchart for Continue Statement</p>
        </h4>
        <img src="https://cdn.programiz.com/sites/tutorial2program/files/continue-statement-flowchart.jpg"
            width="70%" height="500px">
    </section>

    <!-- slide 20 content -->
    <section data-auto-animate data-transition="convex">
        <h3>
            <p><u> Continue Statement in while & For</p>
        </h3>
        <img src="https://cdn.programiz.com/sites/tutorial2program/files/how-continue-statment-works.jpg">
    </section>

    <!-- slide 21 content -->
    <section data-auto-animate data-transition="convex">
        <h4>
            <p><u> Example Program for Continue Statement</p>
        </h4>
        <pre>
       <code data-trim data-noescape>
        #include &lt;stdio.h&gt;
        int main()
        {
           int i, j;
           for(i=1; i&lt;=2; i++)
           {
            for(j=1; j&lt;=2; j++)
              {
                if(i==j)
                continue;
                printf("%d%d \n", i, j);
               }	
            }
         return 0;
        }	
       </code>
     </pre>
    </section>

    <!-- slide 22 content -->
    <section data-auto-animate data-transition="convex">
        <h3>
            The do-while Loop
        </h3>
    </section>

    <!-- slide 23 content -->
    <section data-auto-animate data-transition="convex">
        <p><u>Definition:-</p>
        <ul>
            <li>A do-while loop is similar to while loop, but in this it executes the statements
                inside the body of do-while before checking the condition.</li>
            <li>On the other hand in while loop, it first checks the condition and then the statements in
                while loop gets executed. </li>
            <li>So, it is called as exit controlled loop.</li>
            <li>The special feature of a do-while loop is that it executes the body of the loop at least once
                even if the condition is false.</li>
        </ul>
    </section>

    <!-- slide 24 content -->
    <section data-auto-animate data-transition="convex">
        <h3><b><u>Synatx of do-while Loop</b></h3>
        <img src="http://www.btechsmartclass.com/c_programming/cp_images/do-while-syntax.png">
    </section>

    <!-- slide 25 content -->
    <section data-auto-animate data-transition="convex">
        <h3><b><u>Flowchart for do-while Loop</b></h3>
        <img src="https://www.completecsharptutorial.com/basics/images/dowhile.jpg">
    </section>

    <!-- slide 26 content -->
    <section data-auto-animate data-transition="convex">
        <h4>
            <p><u> Example Program for do-while Loop</p>
        </h4>
        <pre>
       <code data-trim data-noescape>
        #include&lt;stdio.h&gt;
            int main()
            {
                int j=0;
                do
                {
                    printf("Value of variable j is: %d\n", j);
                    j++;
                }while (j&lt;=3);
                return 0;
            }
       </code>
       </pre>
    </section>

    <!-- slide 27 content -->
    <section data-auto-animate data-transition="convex">
        <h3><b><u>Difference Between while & do-while Loop</b></h3>
        <img
            src="https://cdn.shortpixel.ai/client/to_webp,q_glossy,ret_img,w_645/https://masterprograming.com/wp-content/uploads/2019/09/While-and-Do-While-flowchart_structure_loop.png">
    </section>

    <!-- slide 28 content -->
    <section data-auto-animate data-transition="convex">
        <h3>
            The Odd Loop
        </h3>
    </section>

    <!-- slide 29 content -->
    <section data-auto-animate data-transition="convex">
        <ul>
            <li>The loops used so far executed the statements within them a finite number of times.</li>
            <li>In real life programming, there are many times comes a situation when we don't know how many times
                the statements in the loop are to be executed.</li>
            <li>There is comes concept of odd loop.</li>
            <li>Execution of loop an unknown number of times can be done by while for and do-while loops.</li>
        </ul>
    </section>

    <!-- slide 30 content -->
    <section data-auto-animate data-transition="convex">
        <p><u>This situation can be programmed as shown below:-</p>
        <pre>
        <code data-trim data-noescape>
        # include&lt;stdio.h&gt;
        int main()
        {
        char another;
        int num;
        do
        {
        printf(“Enter a number”);
        scanf(“%d”, &num);
        printf(“square of %d is %d\n”,num,num*num);
        printf(“Want to enter another number y/n”);
        fflush(stdin);
        scanf(“%c”, & another);
        }while(another==‘y’);
        return 0;
        }
       </code>
       </pre>
    </section>

    <!-- slide 31 content -->
    <section data-auto-animate data-transition="convex">
        <h4>
            What is fflush..?, Why we use fflush...?
        </h4>
        <ul>
            <li>The function fflush(stdin) is used to flush the output buffer of the stream.</li>
            <li>It is designed to remove or ‘flush out’ any data remaining in the buffer.</li>
            <li>Here we have used ‘stdin’, which means buffer related with standard input device, i.e., keyboard.
            </li>
        </ul>
    </section>

    <!-- slide 32 Content --->
    <section data-auto-animate data-transition="convex">
        <img src="https://www.finbucket.com/wp-content/uploads/2017/11/thank-you-hd-pics.jpg">
    </section>
</div>