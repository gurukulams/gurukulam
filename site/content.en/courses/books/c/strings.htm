---
title: 'Strings'
date: 2018-11-14T19:02:50-07:00
draft: false
---


<div class="slides">
    <!-- slide 1 content -->

    <section data-auto-animate data-transition="convex">
        <img src="https://internetseekho.com/wp-content/uploads/2020/06/strings-in-c-language.png">
    </section>

    <!-- slide 2 content -->
    <section data-auto-animate data-transition="convex">
        <h2>
            <p>
                Strings
            </p>
        </h2>
    </section>

    <section data-auto-animate data-transition="convex">
        <h4>What is a String?</h4>
        <ul>
            <li>String is nothing but a collection of characters in a linear sequence.</li>
            <li>'C' always treats a string a single data even though it contains whitespaces</li>
            <li>A single character is defined using single quote & string is represented using double quotes.</li>
            <li>'C' provides standard library &lt;string.h&gt; that contains many functions which can be used to
                perform complicated string operations easily.</li>
            <li><u><b>For Example:-</b></li>
        </ul>
        <ul>
            <li>"Hello, Students..."</li>
        </ul>
    </section>

    <!-- slide 5 content -->
    <section data-auto-animate data-transition="zoom">
        <h3>Declare and initialize a String</h3>
    </section>

    <!-- slide 5 content -->
    <section data-auto-animate data-transition="zoom">
        <ul>
            <li>A string is a simple array with char as a data type.</li>
            <li>'C' language does not directly support string as a data type.</li>
            <li>Hence, to display a string in 'C', you need to make use of a character array.</li>
            <li>The general syntax for declaring a variable as a string is as follows,</li>
            <ul>
                <li>char string_variable_name [array_size];</li>
            </ul>
            <li>The string declaration can be done as follow:</li>
            <ul>
                <li>char string_name[string_length] = "string"; </li>
            </ul>
        </ul>
    </section>

    <!-- slide 5 content -->
    <section data-auto-animate data-transition="zoom">
        <p><u><b>For-Example:-</b></p>
        <ul>
            <li>char s[5] = "abcd";</li>
            <li>char s[5] = {'a', 'b', 'c', 'd', '\0'};</li>
            <li>'C' also allows us to initialize a string variable without defining the size of the character array.
            </li>
            <li>char s[] = "abcd";</li>
            <li>char s[] = {'a', 'b', 'c', 'd', '\0'};</li>
            <li>The String in memory looks like as:-</li>
        </ul>
        <img src="https://cdn.programiz.com/sites/tutorial2program/files/c-string-initialization.jpg"
            height="200px">
    </section>

    <!-- slide 5 content -->
    <section data-auto-animate data-transition="zoom">
        <p>
            <c><u><b>Example Program</b></c>
        </p>
        <pre>
<code data-trim data-noescape>
    #include&lt;stdio.h&gt;
        int main() 
        {
        char name[10];
        int age;
        printf("Enter your first name and age: \n");
        scanf("%s %d", name, &age); 
        printf("You entered: %s %d",name,age);
        }
</code>
</pre>
    </section>

    <!-- slide 5 content  -->
    <section data-auto-animate data-transition="zoom">
        <h3>Ponters And Strings</h3>
    </section>

    <!-- slide 5 content  -->
    <section data-auto-animate data-transition="zoom">
        <ul>
            <li>We have used pointers with the array, functions, and primitive data types so far.</li>
            <li>However, pointers can be used to point to the strings.</li>
            <li>There are various advantages of using pointers to point strings.</li>
            <li>Similar like arrays, string names are "decayed" to pointers.</li>
            <li>Hence, you can use pointers to manipulate elements of the string.</li>
        </ul>
    </section>

    <!-- slide 5 content  -->
    <section data-auto-animate data-transition="zoom">
        <p>
            <c><u><b>Example Program</b></c>
        </p>
        <pre>
<code data-trim data-noescape>
    #include&lt;stdio.h&gt;  
        void main ()  
        {  
            char *R = "Gurukulams C-Class";  
            printf("String R: %s\n",R);  
            char *S;  
            printf("Copying the Content of R into S...\n");  
            S = R;  
            printf("String S: %s\n",S);  
        }  
</code>
</pre>
    </section>

    <!-- slide 5 content  -->
    <section data-auto-animate data-transition="zoom">
        <img src="https://cdn.educba.com/academy/wp-content/uploads/2019/03/C-String-Functions.jpg">
    </section>

    <!-- slide 5 content  -->
    <section data-auto-animate data-transition="zoom">
        <p>There are many important string functions defined in "string.h" library.</p>
        <table>
            <tr>
                <th>Function</th>
                <th>Description</th>
            </tr>
            <tr>
                <td>strlen(string_name)</td>
                <td>returns the length of string name.</td>
            </tr>
            <tr>
                <td>strrev(string)</td>
                <td>returns reverse string.</td>
            </tr>
            <tr>
                <td>strcpy(destination, source)</td>
                <td>copies the contents of source string to destination string.</td>
            </tr>
        </table>
    </section>


    <!-- slide 5 content  -->
    <section data-auto-animate data-transition="zoom">
        <table>
            <tr>
                <th>Function</th>
                <th>Description</th>
            </tr>
            <tr>
                <td>strcat(first_string, second_string)</td>
                <td>concats or joins first string with second string. The result of the string is stored in first
                    string.</td>
            </tr>
            <tr>
                <td>strcmp(first_string, second_string)</td>
                <td>Compares the first string with second string. If both strings are same,it returns0.</td>
            </tr>
        </table>
    </section>

    <!-- slide 5 content  -->
    <section data-auto-animate data-transition="zoom">
        <table>
            <tr>
                <th>Function</th>
                <th>Description</th>
            </tr>
            <tr>
                <td>strlwr(string)</td>
                <td>returns string characters in lowercase.</td>
            </tr>
            <tr>
                <td>strupr(string)</td>
                <td>returns string characters in uppercase.</td>
            </tr>
            <tr>
                <td>sizeof(string)</td>
                <td>return the size of the string i.e.the characters the string is capable to hold at a stretch.
                </td>
            </tr>
        </table>
    </section>

    <!-- slide 5 content -->
    <section data-auto-animate data-transition="zoom">
        <p>
            <c><u><b>Example Program using strlen(),strcpy(),strcat(),strcmp()</b></c>
        </p>
        <pre>
<code data-trim data-noescape>
    #include&lt;stdio.h&gt;
    #include&lt;string.h&gt;
    int main () 
    {
    char string1[20]="Gurukulams";
    char string2[15]=" C-Class";
    char string3[25];
    int val;
       
    //string comparison
    val= strcmp(string1,string2);
    if(val==0){
    printf("Strings are equal\n");
    }
    else
    {
    printf("Strings are not equal\n");
    }
        
    //string concatenation
    printf("Concatenated string:%s",strcat(string1,string2)); //string1 contains Gurukulams C-Class
        
    //string length
    printf("\nLength of first string:%d",strlen(string1));
    printf("\nLength of second string:%d",strlen(string2));
        
    //string copy
    printf("\nCopied string is:%s\n",strcpy(string3,string1));  //string1 is copied into string3
    return 0;
    }
    </code>
    </pre>
    </section>

    <!-- slide 5 content  -->
    <section data-auto-animate data-transition="zoom">
        <img
            src="http://www.wallpaperspick.com/wp-content/uploads/2015/10/Thank-You-HD-Wallpaper-04550-540x405.jpg">
    </section>

</div>