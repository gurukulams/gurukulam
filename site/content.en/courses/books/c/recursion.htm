---
title: 'Recursion'


---

<div class="slides">

  
    <!-- slide 2 content -->
    <section data-auto-animate data-transition="zoom">
        <h3>Recursion</h3>
    </section>

    <!-- slide 3 content -->
    <section data-auto-animate data-transition="zoom">
        <ul>
            <li>There is another important feature associated with functions in C.</li>
            <li>That is nothing but Recursion Concept.</li>
            <li>Eventhough, it is a difficult to understand at the beginning, if you once understand the concept it
                is very easy to use.</li>
            <li>This Recursion concept is the most direct way of programming to a complicated logic.</li>
        </ul>
    </section>

    <!-- slide 3 content -->
    <section data-auto-animate data-transition="zoom">
        <h3>What is Recursion?</h3>
    </section>

    <!-- slide 3 content -->
    <section data-auto-animate data-transition="zoom">
        <p><b><u>
                    <c>Recursion</c>
                </b></p>
        <ul>
            <li>A function that calls itself is known as a recursive function.</li>
            <li>Recursion is a coding technique in which a function calls itself directly or indirectly and the
                corresponding function is called as recursive function.</li>
            <li>In other words, When function is call in the same function is known as recursion.</li>
            <li>Using this many problems can be solved easily with less time.</li>
        </ul>
    </section>

    <!-- slide 3 content -->
    <section data-auto-animate data-transition="zoom">
        <p><u>
                <c>There are two major parts in recursion:</c>
            </p>
        <ul>
            <li><u><b>Base Condition:-</b></li>
            <ul>
                <li>The condition in which a value is returned and no futher functions are called.</li>
            </ul>
            <li><b><u>Recursion Condition:-</b></li>
            <ul>
                <li>The way return value of another function call is used to generate the return value of the parent
                    function call</li>
            </ul>
        </ul>
    </section>

    <!-- slide 3 content -->
    <section data-auto-animate data-transition="zoom">
        <h3>Advantages of Recursion</h3>
    </section>

    <!-- slide 3 content -->
    <section data-auto-animate data-transition="zoom">
        <p><b><u>
                    <c>Some of the Advantages of Recursion is listed:-</c>
                </b></p>
        <ul>
            <li>Recursion will be useful when same kind of work has to be continued for a finite times.
            </li>
            <li>We can reduce the length of the code by using recursion in c.</li>
            <li>Recursion is very useful for solving data structure problems.</li>
        </ul>
    </section>

    <!-- slide 3 content -->
    <section data-auto-animate data-transition="zoom">
        <h3>Disadvantages of Recursion</h3>
    </section>

    <!-- slide 3 content -->
    <section data-auto-animate data-transition="zoom">
        <p><b><u>
                    <c>Some of the Disadvantages of Recursion is listed:-</c>
                </b></p>
        <ul>
            <li>It requires more memory because recursive calls along with automatic variables are stored on the
                stack.</li>
            <li>Recursive solution is always logical and it is very difficult to trace i.e debug and analyse.</li>
        </ul>
    </section>

    <!-- slide 3 content -->
    <section data-auto-animate data-transition="zoom">
        <h3>Types of Recursion</h3>
    </section>

    <!-- slide 3 content -->
    <section data-auto-animate data-transition="zoom">
        <p><b><u>
                    <c>Types of Recursion</c>
                </b></p>
        <p>There are Two Types of Recursion in C. They are:-</p>
        <ul>
            <li>Direct recursion</li>
            <li>Indirect recursion</li>
        </ul>
        <img src="https://iq.opengenus.org/content/images/2019/04/r2.JPG" height=370rem>
    </section>

    <!-- slide 3 content -->
    <section data-auto-animate data-transition="zoom">
        <p><b><u>
                    <c>Direct Recursion</c>
                </b></p>
        <ul>
            <li>A function add is called direct recursive if it calls the same function add.</li>
            <li><b><u>Example</b></li>
        </ul>
        <pre>
            <code data-trim data-noescape>
                void add()
                {
                    Statements....
                    Statements....
                
                    add(); // direct recursive function
                
                    Statements....
                    Statements....
                }
            </code>
        </pre>
    </section>

    <!-- slide 3 content -->
    <section data-auto-animate data-transition="zoom">
        <p><b><u>
                    <c>In-Direct Recursion</c>
                </b></p>
        <ul>
            <li>A function add1() is called indirect recursive if it calls another function say add2() and add2()
                calls add1() function directly or indirectly. </li>
            <li><b><u>Example</b></li>
        </ul>
        <pre>
            <code data-trim data-noescape>
                void add1()
                {
                    Statements....
                    add2(); // indirect recursive function
                    Statements....
                }
                void add2()
                {
                    Statements....
                   add1(); // indirect recursive function
                }
            </code>
        </pre>
    </section>

    <!-- slide 3 content -->
    <section data-auto-animate data-transition="zoom">
        <h3>Flow-Chart of the Recursion</h3>
    </section>

    <!-- slide 3 content -->
    <section data-auto-animate data-transition="zoom">
        <p><b><u>
                    <c>Flow-Chart of Recursion</c>
                </b></p>
        <img src="https://iq.opengenus.org/content/images/2019/04/r3.JPG">
    </section>

    <!-- slide 3 content -->
    <section data-auto-animate data-transition="zoom">
        <h3>Recursion Syntax</h3>
    </section>

    <!-- slide 3 content -->
    <section data-auto-animate data-transition="zoom">
        <p><b><u>
                    <c>Syntax:-</c>
                </b></p>
        <pre>
            <code data-trim data-noescape>
                function function_name()
                {
                    statements...

                  function_name();//calling itself (recursive function)

                  statements...  
                }
            </code>
        </pre>
    </section>

    <!-- slide 3 content -->
    <section data-auto-animate data-transition="zoom">
        <p><b><u>
                    <c>Example Program:-</c>
                </b></p>
        <pre>
            <code data-trim data-noescape>
                #include&lt;stdio.h&gt; 
                int fact (int);  
                int main()  
                {  
                    int n,f;  
                    printf("Enter the number whose factorial you want to calculate?");  
                    scanf("%d",&n);  
                    f = fact(n);  
                    printf("Factorial Value of %d is %d",n,f);  
                }  
                int fact(int n)  
                {  
                    if (n==0)  
                    {  
                        return 0;  
                    }  
                    else if ( n == 1)  
                    {  
                        return 1;  
                    }  
                    else   
                    {  
                        return n*fact(n-1);  
                    }  
                }
                </code>
                </pre>
    </section>

    <!-- slide 3 content -->
    <section data-auto-animate data-transition="zoom">
        <img
            src="https://i0.wp.com/www.wishesquotesimages.com/wp-content/uploads/2019/01/beautiful-thank-you-images.jpg?resize=768%2C432">
    </section>

</div>