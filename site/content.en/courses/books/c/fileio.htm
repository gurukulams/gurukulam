---
title: 'File Input Output Functions'


---

<div class="slides">

    <!-- slide 1 content -->
    <section data-auto-animate data-transition="convex">
        <img src="https://www.chlopadhe.com/wp-content/uploads/2020/05/file-input-output-in-1.jpg">
    </section>

    <!-- slide 2 content -->
    <section data-auto-animate data-transition="convex">
        <h3>Introduction to File Input and Output Functions</h3>
    </section>

    <!-- slide 3 content -->
    <section data-auto-animate data-transition="convex">
        <p>File Input Output Functions</p>
        <ul>
            <li>A File can be used to store a large volume of persistent data.</li>
            <li>It represents a sequence of bytes on the disk where a group of related data is stored.</li>
            <li>File is created for permanent storage of data.</li>
            <li>In C language, we use a structure pointer of file type to declare a file.</li>
            <pre>
                <code>FILE *fp;</code>
            </pre>
        </ul>
    </section>

    <!-- slide 2 content -->
    <section data-auto-animate data-transition="convex">
        <h3>Why files are needed?</h3>
    </section>

    <!-- slide 3 content -->
    <section data-auto-animate data-transition="convex">
        <ul>
            <li>There are many advantages while using files. Some of them are listed as follows:-</li>
            <ul>
                <li>You can easily move your data from one computer to another without any changes.</li>
                <li>When a program is terminated, the entire data is lost. Storing in a file will preserve your data
                    even if the program terminates.</li>
                <li>If you have to enter a large number of data, it will take a lot of time to enter all.</li>
                <li>However, if you have a file containing all the data, you can easily access the contents of the
                    file using a few commands.</li>
            </ul>
        </ul>
    </section>

    <!-- slide 2 content -->
    <section data-auto-animate data-transition="convex">
        <h3>File Input Output Functions</h3>
    </section>

    <!-- slide 2 content -->
    <section data-auto-animate data-transition="convex">
        <ul>
            <li>C provides a number of functions that helps to perform basic file operations. They are listed below
                as a table:-</li>
        </ul>
        <img height="537px"
            src="https://2.bp.blogspot.com/-fyHPgCBN83I/UePiYSNImOI/AAAAAAAAAXw/2YD2VEpa6W4/s1600/File+input+output+functions.png">
    </section>

    <!-- slide 2 content -->
    <section data-auto-animate data-transition="convex">
        <h3>File Operations</h3>
    </section>

    <!-- slide 2 content -->
    <section data-auto-animate data-transition="convex">
        <p>
            <c><u><b>Operations Performed using Files</b></c>
        </p>
        <ul>
            <li>In C, There are Four Major Operations are perform using Files. They are:-</li>
            <ul>
                <li>Creating a new file</li>
                <li>Opening an existing file</li>
                <li>Reading from and writing information to a file</li>
                <li>Closing a file</li>
            </ul>
        </ul>
    </section>

    <!-- slide 2 content -->
    <section data-auto-animate data-transition="convex">
        <h3>Creating and Opening a File</h3>
    </section>

    <!-- slide 2 content -->
    <section data-auto-animate data-transition="convex">
        <ul>
            <li>The fopen() function is used to create a new file or to open an existing file.</li>
            <li><u><b>Syntax :-</b></li>
            <ul>
                <li>*fp = FILE *fopen(const char *filename, const char *mode);</li>
            </ul>
            <li>Here, *fp is the FILE pointer (FILE *fp), which will hold the reference to the opened(or created)
                file.</li>
            <li>filename is the name of the file to be opened and mode specifies the purpose of opening the file.
            </li>
        </ul>
    </section>

    <!-- slide 2 content -->
    <section data-auto-animate data-transition="convex">
        <p>
            <c><u><b>List of Modes Which are used in file operations</b></c>
        </p>
        <table class="table table-bordered table-striped">
            <tr>
                <th>mode</th>
                <th>description</th>
            </tr>
            <tr>
                <td>r</td>
                <td>opens a text file in reading mode</td>
            </tr>
            <tr>
                <td>r+</td>
                <td>opens a text file in both reading and writing mode</td>
            </tr>
            <tr>
                <td>w</td>
                <td>opens or create a text file in writing mode.</td>
            </tr>
            <tr>
                <td>w+</td>
                <td>opens a text file in both reading and writing mode</td>
            </tr>
        </table>
    </section>

    <!-- slide 2 content -->
    <section data-auto-animate data-transition="convex">
        <p>
            <c><u><b>List of Modes Which are used in file operations</b></c>
        </p>
        <table class="table table-bordered table-striped">
            <tr>
                <th>mode</th>
                <th>description</th>
            </tr>
            <tr>
                <td>a</td>
                <td>opens a text file in append mode</td>
            </tr>
            <tr>
                <td>a+</td>
                <td>opens a text file in both reading and writing mode</td>
            </tr>
            <tr>
                <td>rb</td>
                <td>opens a binary file in reading mode</td>
            </tr>
            <tr>
                <td>rb+</td>
                <td>opens a binary file in both reading and writing mode</td>
            </tr>
        </table>
    </section>


    <!-- slide 2 content -->
    <section data-auto-animate data-transition="convex">
        <p>
            <c><u><b>List of Modes Which are used in file operations</b></c>
        </p>
        <table class="table table-bordered table-striped">
            <tr>
                <th>mode</th>
                <th>description</th>
            </tr>
            <tr>
                <td>wb</td>
                <td>opens or create a binary file in writing mode</td>
            </tr>
            <tr>
                <td>wb+</td>
                <td>opens a binary file in both reading and writing mode</td>
            </tr>
            <tr>
                <td>ab</td>
                <td>opens a binary file in append mode</td>
            </tr>
            <tr>
                <td>ab+</td>
                <td>opens a binary file in both reading and writing mode</td>
            </tr>
        </table>
    </section>

    <!-- slide 2 content -->
    <section data-auto-animate data-transition="convex">
        <h3>Reading from and writing information to a file</h3>
    </section>

    <!-- slide 2 content -->
    <section data-auto-animate data-transition="convex">
        <p>
            <c><u><b>Reading information from a file and writing information to a file</b></c>
        </p>
        <ul>
            <li>Once a file has been successfully opened, you can read from it using fscanf() or write to it using
                fprintf().</li>
            <li>For reading and writing to a text file, we use the functions fprintf() and fscanf().</li>
            <li>They are just the file versions of printf() and scanf().</li>
            <li>The only difference is that fprint() and fscanf() expects a pointer to the structure FILE.</li>
        </ul>
    </section>

    <!-- slide 2 content -->
    <section data-auto-animate data-transition="convex">
        <h3>Example Program</h3>
    </section>

    <!-- slide 2 content -->
    <section data-auto-animate data-transition="convex">
        <p>
            <c><u><b>Example Program using fprintf() and fscanf()</b></c>
        </p>
        <pre>
            <code data-trim data-noescape>
#include&lt;stdio.h&gt;
struct emp
{
char name[10];
int age;
};

void main()
{
struct emp e;
FILE *p,*q;
p = fopen("one.txt", "a");
q = fopen("one.txt", "r");
printf("Enter Name and Age:");
scanf("%s %d", e.name, &e.age);
fprintf(p,"%s %d", e.name, e.age);
fclose(p);
do
{
    fscanf(q,"%s %d", e.name, e.age);
    printf("%s %d", e.name, e.age);
}
while(!feof(q));
}
                </code>
                </pre>
    </section>

    <!-- slide 2 content -->
    <section data-auto-animate data-transition="convex">
        <h3>Closing a File</h3>
    </section>

    <!-- slide 2 content -->
    <section data-auto-animate data-transition="convex">
        <p>
            <c><u><b>Closing a file</b></c>
        </p>
        <ul>
            <li>The fclose() function is used to close an already opened file.</li>
            <li><u><b>Syntax :-</b></li>
            <ul>
                <li>int fclose( FILE *fp);</li>
            </ul>
            <li>Here, fclose() function closes the file and returns zero on success, or EOF if there is an error in
                closing the file. This EOF is a constant defined in the header file stdio.h.</li>
        </ul>
    </section>

    <!-- slide 2 content -->
    <section data-auto-animate data-transition="convex">
        <img
            src="https://previews.123rf.com/images/melpomen/melpomen1804/melpomen180400113/98866066-thank-you-message-with-roses-and-leaves-top-view-flat-lay.jpg">
    </section>

</div>
