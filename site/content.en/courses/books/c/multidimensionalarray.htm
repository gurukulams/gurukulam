---
title: 'Multi-Dimensional Array'


---

<div class="slides">
  
    <!-- slide 1 Content --->
    <section class="center" data-auto-animate data-transition="convex">
        <img
            src="https://x7c2w4j6.stackpathcdn.com/wp-content/uploads/2019/09/Multi-Dimensional-Arrays-in-C-Programming.jpg">
    </section>

    <!-- slide 2 content -->
    <section data-auto-animate data-transition="zoom">
        <h3>Introduction to Multi-Dimensional Array</h3>
    </section>

    <!-- slide 3 content -->
    <section data-auto-animate data-transition="zoom">
        <p><b><u>
                    <c>Multi-Dimensional Array</c>
                </b></p>
        <ul>
            <li>In the previous Chapter on Arrays, we covered, all about arrays and how they work.</li>
            <li>The arrays in the previous chapter are one-dimensional, but C can create and use multi-dimensional
                arrays.
            </li>
            <li>An Array having more than one dimension is called Multi Dimensional array in C.</li>
            <li>And Also, we can define multidimensional arrays in simple words as array of arrays. Data in
                multidimensional arrays are stored in tabular form (in row major order).</li>
        </ul>
    </section>

    <!-- slide 5 content -->
    <section data-auto-animate data-transition="zoom">
        <h3>Declaration of Multi-Dimensional Array</h3>
    </section>

    <!-- slide 5 content -->
    <section data-auto-animate data-transition="zoom">
        <ul>
            <li><u>General form of declaring N-dimensional arrays:</li>
            <li>data_type array_name[size1][size2]....[sizeN];</li>
            <ul>
                <li>Here, the data_type refers the Type of data to be stored in the array.</li>
                <li>array_name refers the Name of the array.</li>
                <li>size1, size2,... ,sizeN refers the Sizes of the dimensions</li>
            </ul>
        </ul>
    </section>

    <!-- slide 5 content -->
    <section data-auto-animate data-transition="zoom">
        <p><b><u>
                    <c>For-Example:-</c>
                </b></p>
        <ul>
            <li>int x[3][4];</li>
            <li>Here, x is a two-dimensional (2d) array.</li>
            <li>The array can hold 12 elements. This array has a table with 3 rows and each row has 4 columns.</li>
            <li>Then, the array looks like as below:-</li>
        </ul>
        <img src="https://cdn.programiz.com/sites/tutorial2program/files/two-dimensional-array_0.jpg">
    </section>

    <!-- slide 5 content -->
    <section data-auto-animate data-transition="zoom">
        <h3>Two-Dimensional Array</h3>
    </section>

    <!-- slide 5 content -->
    <section data-auto-animate data-transition="zoom">
        <ul>
            <li>The simplest form of multidimensional array is the two-dimensional array.</li>
            <li>A two-dimensional array is, in essence, a list of one-dimensional arrays.</li>
            <li>To declare a two-dimensional integer array of size [x][y], It shows as follows:âˆ’</li>
            <ul>
                <li>type arrayName [ x ][ y ];</li>
            </ul>
            <li>Here, the type can be any valid data type and arrayName will be a valid C identifier. </li>
        </ul>
    </section>

    <!-- slide 5 content -->
    <section data-auto-animate data-transition="zoom">
        <h3>Initialization of a 2d array</h3>
    </section>

    <!-- slide 5 content -->
    <section data-auto-animate data-transition="zoom">
        <ul>
            <li>Multidimensional arrays may be initialized by specifying bracketed values for each row.</li>
            <li>Following is an array with 3 rows and each row has 4 columns.</li>
        </ul>
        <pre>
            <code data-trim data-noescape>
                int a[3][4] = {  
                    {0, 1, 2, 3} ,   /*  row indexed by 0 */
                    {4, 5, 6, 7} ,   /*  row indexed by 1 */
                    {8, 9, 10, 11}   /*  row indexed by 2 */
                 };
            </code>
        </pre>
        <ul>
            <li>The nested braces, which indicate the intended row, are optional. It also initialized like below:-
            </li>
            <li>int a[3][4] = {0,1,2,3,4,5,6,7,8,9,10,11};</li>
        </ul>
    </section>

    <!-- slide 5 content -->
    <section data-auto-animate data-transition="zoom">
        <p><b><u>
                    <c>Example Program</c>
                </b></p>
        <pre>
            <code data-trim data-noescape>
#include&lt;stdio.h&gt;
const int CITY = 2;
const int WEEK = 7;
int main()
{
int temperature[CITY][WEEK];

// Store values in a 2d array
for (int i = 0; i &lt; CITY; ++i)
{
for (int j = 0; j &lt; WEEK; ++j)
{
  printf("City %d, Day %d: ", i + 1, j + 1);
  scanf("%d", &temperature[i][j]);
}
}
printf("\nDisplaying values: \n\n");

// Display values of a 2d array
for (int i = 0; i &lt; CITY; ++i)
{
for (int j = 0; j &lt; WEEK; ++j)
{
  printf("City %d, Day %d = %d\n", i + 1, j + 1, temperature[i][j]);
}
}
return 0;
}
            </code>
        </pre>
    </section>

    <!-- slide 5 content -->
    <section data-auto-animate data-transition="zoom">
        <h3>Three-Dimensional Array</h3>
    </section>

    <!-- slide 5 content -->
    <section data-auto-animate data-transition="zoom">
        <ul>
            <li>A three-dimensional (3D) array is an array of arrays of arrays.</li>
            <li>In C programming an array can have two, three, or even ten or more dimensions.</li>
            <li>But it is depends on which compiler is being used.</li>
        </ul>
        <img src="https://media.geeksforgeeks.org/wp-content/uploads/3D-array.jpg" height="300rem">
        <ul>
            <li>Figure Represent Three-Dimensional Array.</li>
        </ul>
    </section>

    <!-- slide 5 content -->
    <section data-auto-animate data-transition="zoom">
        <h3>Initialization of a 3d array</h3>
    </section>

    <!-- slide 5 content -->
    <section data-auto-animate data-transition="zoom">
        <ul>
            <li>Initialization in Three-Dimensional array is same as that of Two-dimensional arrays.</li>
            <li>The difference is as the number of dimension increases so the number of nested braces will also
                increase.
            </li>
            <li>For Example</li>
            <ul>
                <li>int x[2][2][3] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11};</li>
            </ul>
            <li>And also it initialized in another method too.</li>
            <ul>
                <li>int x[2][2][3] ={{{0,1,2}, {3,4,5}},{{6,7,8}, {9,10,11}}};</li>
            </ul>
        </ul>
    </section>

    <!-- slide 5 content -->
    <section data-auto-animate data-transition="zoom">
        <h3>Example Program</h3>
        <pre>
            <code data-trim data-noescape>
#include&lt;stdio.h&gt;
int main()
{
  int test[2][3][2];
  printf("Enter 12 values: \n");
  for (int i = 0; i &lt; 2; ++i)
  {
    for (int j = 0; j &lt; 3; ++j)
    {
      for (int k = 0; k &lt; 2; ++k)
      {
        scanf("%d", &test[i][j][k]);
      }
    }
  }

  // Printing values with proper index.
  printf("\nDisplaying values:\n");
  for (int i = 0; i &lt; 2; ++i)
  {
    for (int j = 0; j &lt; 3; ++j)
    {
      for (int k = 0; k &lt; 2; ++k)
      {
        printf("test[%d][%d][%d] = %d\n", i, j, k, test[i][j][k]);
      }
    }
  }
return 0;
}
            </code>
        </pre>
    </section>

    <!-- slide 5 content -->
    <section data-auto-animate data-transition="zoom">
        <img src="https://www.freewalldownload.com/thank-you/cute-thank-you-with-flowers-free-download.jpg">
    </section>

</div>