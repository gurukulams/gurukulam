---
title: 'Functions'
date: 2018-11-14T19:02:50-07:00
draft: false
---


<div class="slides">
    
    <!-- slide 1 content -->
    <section data-auto-animate data-transition="convex" data-background-color="black">
        <img src="http://www.republicnorwood.com.au/images/logo-functions.png">
    </section>

    <!-- slide 2 content -->
    <section data-auto-animate data-transition="zoom">
        <h3>What is Function...?</h3>
    </section>

    <!-- slide 3 content -->
    <section data-auto-animate data-transition="zoom">
        <p><u>Function</p>
        <ul>
            <li>A function is a group of statements that together perform a task.</li>
            <li>It divide a large program into the basic building blocks known as function.</li>
            <li>The function contains the set of programming statements enclosed by {}.</li>
            <li> A function can be called multiple times to provide reusability and modularity to the program.
            </li>
        </ul>

    </section>

    <!-- slide 4 content -->
    <section data-auto-animate data-transition="zoom">
        <h3>Why we use Function..?</h3>
    </section>

    <!-- slide 5 content -->
    <section data-auto-animate data-transition="zoom">
        <p><u>Functions are used because of following reasons:-</p>
        <ul>
            <li>To improve the readability of code.</li>
            <li>Improves the reusability of the code, same function can be used in any program rather than writing
                the same code from scratch.</li>
            <li>Debugging of the code would be easier if you use functions, as errors are easy to be traced.</li>
            <li> Reduces the size of the code, duplicate set of statements are replaced by function calls.</li>
        </ul>
    </section>

    <!-- slide 6 content -->
    <section data-auto-animate data-transition="zoom">
        <p><u>Advantages of Function</p>
        <ul>
            <li>
                By using functions, we can avoid rewriting same logic/code again and again in a program.
            </li>
            <li>We can call functions any number of times in a program and from any place in a program.</li>
            <li>We can track a large program easily when it is divided into multiple functions.</li>
            <li>Reusability is the main achievement of functions.</li>

        </ul>
    </section>

    <!-- slide 7 content -->
    <section data-auto-animate data-transition="zoom">
        <h3>Types of Function</h3>
    </section>

    <!-- slide 8 content -->
    <section data-auto-animate data-transition="zoom">
        <p><u>Types of Function</p>
        <ul>
            <li>There are Two Types of Function.</li>
            <li>They are Listed Below:-</li>
            <ul>
                <li>Library Function</li>
                <li>User-defined Function</li>
            </ul>
        </ul>
        <img src="https://static.javatpoint.com/cpages/images/c-function.jpg">
    </section>

    <!-- slide 9 content -->
    <section data-auto-animate data-transition="zoom">
        <p>The standard library functions are built-in functions, they are defined in header files.</p>
        <ul>
            <li>The printf() is a standard library function to send formatted output to the screen (display output
                on the screen). This function is defined in the stdio.h header file.
                Hence, to use the printf()function, we need to include the stdio.h header file using
                #include&lt;stdio.h&gt;.</li>
            <li>The sqrt() function calculates the square root of a number.The function is defined in the math.h
                header file.</li>
        </ul>
    </section>

    <!-- slide 10 content -->
    <section data-auto-animate data-transition="zoom">
        <p><u><b>User-Defined Function are:-</b></p>
        <ul>
            <li>You can also create functions as per your need.</li>
            <li>Such functions created by the user are known as user-defined functions.</li>
            <ul>
                <p><u><b>Advantages</b></p>
                <li>The program will be easier to understand, maintain and debug.</li>
                <li>Reusable codes that can be used in other programs.</li>
                <li>A large program can be divided into smaller modules.</li>
            </ul>
        </ul>
    </section>

    <!-- slide 11 content -->
    <section data-auto-animate data-transition="zoom">
        <h3>Function Aspects</h3>
    </section>

    <!-- slide 12 content -->
    <section data-auto-animate data-transition="zoom">
        <p><u>Function Aspects</p>
        <ul>
            <li>There are Three Aspects in a Function. They are Listed Below:-</li>
            <ul>
                <li>Function Declaration</li>
                <li>Function Call</li>
                <li>Function Definition</li>
            </ul>
        </ul>
    </section>

    <!-- slide 13 content -->
    <section data-auto-animate data-transition="zoom">
        <ul>
            <li><u>Function Declaration</li>
            <ul>
                <li>In a Program, the function must be declared Globally.</li>
                <li>To tell the compiler about the function name, function parameters, and return type.</li>
            </ul>
        </ul>
    </section>

    <!-- slide 14 content -->
    <section data-auto-animate data-transition="zoom">
        <ul>
            <li><u>Function Call</li>
            <ul>
                <li>Function can be called from anywhere in the program.</li>
                <li>The parameter list must not differ in function calling and function declaration.</li>
                <li>We must pass the same number of functions as it is declared in the function declaration.</li>
            </ul>
        </ul>
    </section>

    <!-- slide 15 content -->
    <section data-auto-animate data-transition="zoom">
        <ul>
            <li><u>Function Definition</li>
            <ul>
                <li>The Function Definition, contains the actual statements which are to be executed.</li>
                <li>It is the most important aspect to which the control comes when the function is called.</li>
                <li>Here, we must notice that only one value can be returned from the function.</li>
            </ul>
        </ul>
    </section>

    <!-- slide 16 content -->
    <section data-auto-animate data-transition="zoom">
        <img src="https://cdn.programiz.com/sites/tutorial2program/files/function-c-programming.jpg">
    </section>

    <!-- slide 17 content -->
    <section data-auto-animate data-transition="zoom">
        <p><u>Sample Program to Describe about Function</p>
        <pre>
        <code data-trim data-noescape>
        #include&lt;stdio.h&gt;  
        int sum(); //Function Declaration 
        int main()  
        {  
         printf("\nGoing to calculate the sum of two numbers:");  
         sum(); //Function Call 
        }  
        
        int sum() //Function Definition  
        {  
         int a,b;   
         printf("\nEnter two numbers");  
         scanf("%d %d",&a,&b);   
         printf("The sum is %d",a+b);  
        }  
        </code>
    </pre>
    </section>

    <!-- slide 18 content -->
    <section data-auto-animate data-transition="zoom">
        <h3>Passing Values Between Functions</h3>
    </section>

    <!-- slide 19 content -->
    <section data-auto-animate data-transition="zoom">
        <ul>
            <li>In, this section we are going to study about how the values are passing between the called function
                and calling function.</li>
            <li>The mechanism used to convey information to the function is the ‘argument'.</li>
            <li>You have unknowingly used the arguments in the printf( ) and scanf( ) functions;</li>
            <li>The format string and the list of variables used inside the parentheses in these functions are
                arguments.</li>
            <li>The arguments are sometimes also called ‘parameters’.</li>
        </ul>
    </section>

    <!-- slide 20 content -->
    <section data-auto-animate data-transition="zoom">
        <ul>
            <li>In the following program, in main() we receive the values of a, b and c through the keyboard and
                then output the sum of a, b and c.</li>
            <li>However, the calculation of sum is done in a different function called calsum().</li>
            <li>If sum is to be calculated in calsum() and values of a, b and c are received in main(), then we
                must pass on these values to calsum(), and once calsum() calculates the sum we must return it from
                calsum() back to main().</li>
        </ul>
    </section>

    <!-- slide 21 content -->
    <section data-auto-animate data-transition="zoom">
        <p><u>Sample Program for Passing values between function</p>
        <pre>
 <code data-trim data-noescape>
    #include&lt;stdio.h&gt;
    int calsum(int, int, int);
    int main()
    {
        int a, b, c, sum;
        printf("\nEnter any three numbers \n");
        scanf("%d %d %d", &a, &b, &c);
        sum = calsum(a, b, c);
        printf("\nSum = %d \n", sum);
    }
    int calsum(int x, int y, int z)
    {
    
        int d;
        d = x + y + z;
        return (d);
    }
</code>
</pre>
    </section>

    <!-- slide 22 content -->
    <section data-auto-animate data-transition="zoom">
        <h3>Order of Passing Arguments</h3>
    </section>

    <!-- slide 23 content -->
    <section data-auto-animate data-transition="zoom">
        <ul>
            <li><u>Consider the following Function Call:-</li>
            <li>func(a,b,c);</li>
            <ul>
                <li>In the above function call, it doesn't matter whether the arguments are passed from left to
                    right or from right to left.</li>
                <li>However, in some function calls, the order of passing arguments becomes an important
                    consideration.</li>
            </ul>
        </ul>
    </section>

    <!-- slide 24 content -->
    <section data-auto-animate data-transition="zoom">
        <ul>
            <li><u>For Example:-</li>
            <li>Now Consider the Following Program</li>
        </ul>
        <pre>
        <code data-trim data-noescape>
            #include&lt;stdio.h&gt;
            int main()
            {
                int a=1;
                printf("%d%d%d \n",a,++a,a++);
                return 0;
            }
        </code>
    </pre>
    </section>

    <!-- slide 25 content -->
    <section data-auto-animate data-transition="zoom">
        <ul>
            <li>It appears that this printf() would gives the output as 1 2 2.</li>
            <li>But suprisingly, it prints the output as 3 3 1.</li>
            <li>This is Because, in c during a fuction call, the arguments are passed from right to left.</li>
            <li>Which means, Firstly 1 is passed through the expression a++ and then a is incremented to 2.</li>
            <li>Then result of ++a is passed. That is, a is incremented to 3 and then passed.</li>
        </ul>
    </section>

    <!-- slide 26 content -->
    <section data-auto-animate data-transition="zoom">
        <ul>
            <li>Finally, latest value of a=3 is passed. Thus in right to left order 1,3,3 get passed.</li>
            <li>Once, printf() collects them, it prints them in the order in which we have asked it to get them
                printed(and not the order in which they were passed).</li>
            <li>Thus, 3 3 1 gets printed.</li>
            <li>It is important to note that the order of passing arguments to a function is not specified by the
                language.</li>
            <li>Hence it is a compiler-dependent.</li>
        </ul>
    </section>

    <!-- slide 27 content -->
    <section data-auto-animate data-transition="zoom">
        <h3>Library Functions</h3>
    </section>

    <!-- slide 28 content -->
    <section data-auto-animate data-transition="zoom">
        <p><u>Some of the Library Functions and its Uses are listed below as table:-</p>
        <table>
            <tr>
                <th align="center">Library Function</th>
                <th align="center">Usage</th>
            </tr>
            <tr>
                <td>stdio.h</td>
                <td>Used to perform input and output operations like scanf() and printf().</td>
            </tr>

            <tr>
                <td>conio.h</td>
                <td>Used to perform console input and console output operations like clrscr() to clear the screen
                    and getch() to get the character from the keyboard.</td>
            </tr>
        </table>
    </section>

    <!-- slide 29 content -->
    <section data-auto-animate data-transition="zoom">
        <table>
            <tr>
                <th align="center">Library Function</th>
                <th align="center">Usage</th>
            </tr>

            <tr>
                <td>stdlib.h</td>
                <td>Used to perform standard utility functions like dynamic memory allocation such as malloc() and
                    calloc().</td>
            </tr>
            <tr>
                <td>math.h</td>
                <td>Used to perform mathematical operations like sqrt(), pow(), sin(), cos() etc., to obtain the
                    square root and
                    the power, sin, cos value of a number respectively.</td>
            </tr>
        </table>
    </section>

    <!-- slide 30 content -->
    <section data-auto-animate data-transition="zoom">
        <table>
            <tr>
                <th align="center">Library Function</th>
                <th align="center">Usage</th>
            </tr>

            <tr>
                <td>time.h</td>
                <td>Used to perform functions related to date and time like setdate() and getdate() to modify the
                    system date and get the CPU time respectively.</td>
            </tr>
            <tr>
                <td>string.h</td>
                <td>Used to perform string manipulation operations like strlen and strcpy.</td>
            </tr>
        </table>
    </section>

    <!-- slide 31 content -->
    <section data-auto-animate data-transition="zoom">
        <h3>One Dicey Issue</h3>
    </section>

    <!-- slide 32 content -->
    <section data-auto-animate data-transition="zoom">
        <p><u>Now Consider the Following Program:-</p>
        <pre>
<code data-trim data-noescape>
    #include&lt;stdio.h&gt;
    int main()
    {
    int i = 10, j = 20 ;
    printf ( "%d%d%d \n", i, j);
    printf ( "%d \n", i, j);
    return 0;
    }
</code>
 </pre>
        <ul>
            <li>The above functions get successfully compiled even though there is a mismatch in the format
                specifiers and the variables in the list.</li>
        </ul>
    </section>

    <!-- slide 33 content -->
    <section data-auto-animate data-transition="zoom">
        <ul>
            <li>This is because printf() accepts variable number of arguments (sometimes 2 arguments, sometimes 3
                arguments, etc.), and even with the mismatch above the call still matches with the prototype of
                printf() present in ‘stdio.h’.</li>
            <li>At run-time when the first printf() is executed, since there is no variable matching with the last
                specifier %d, a garbage integer gets printed</li>
            <li>Similarly, in the second printf() since the format specifier for j has not been mentioned its value
                does not get printed.</li>
        </ul>
    </section>

    <!-- slide 34 content -->
    <section data-auto-animate data-transition="zoom">
        <img
            src="https://i2.wp.com/www.wishesquotesimages.com/wp-content/uploads/2018/09/thank-you-image.jpg?resize=1000%2C432">
    </section>

</div>