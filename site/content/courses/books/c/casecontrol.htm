---
title: ' Case Control Instruction'
date: 2018-11-14T19:02:50-07:00
weight:
draft: false
---

        <div class="slides">
            <!-- slide 1 content -->
            <section data-auto-animate data-transition="convex">
                <h2>
                    <p>
                        Case Control Instruction
                    </p>
                </h2>
            </section>
    
            <!-- slide 2 content -->
            <section data-auto-animate data-transition="zoom">
                <h3><b>Introduction</b></h3>
                <ul>
                    <li>In programming, we are often faced with situations where we are required to make a choice between a
                        number of alternatives rather than only one or two.</li>
                    <li>C provides a special control statement that allows us to handle such cases effectively</li>
                    <li>In this chapter, we would also study a keyword called goto and understand why we should avoid using
                        it.</li>
                </ul>
            </section>
    
            <!-- slide 3 content -->
            <section data-auto-animate data-transition="zoom">
                <h2>
                    <p>
                        Decisions using Switch
                    </p>
                </h2>
            </section>
    
            <!-- slide 5 content -->
            <section data-auto-animate data-transition="zoom">
                <p><u>What is Switch..?</p>
                <table>
                    <tr>
                        <td>
                            <img
                                src="https://image.shutterstock.com/image-vector/set-realistic-toggle-switches-on-260nw-647042647.jpg">
                        </td>
                    </tr>
                    <tr><video data-autoplay src="https://thumbs.gfycat.com/FixedDeficientIlladopsis-mobile.mp4"></video>
                    </tr>
                </table>
            </section>
    
    
    
            <!-- slide 4 content -->
            <section data-auto-animate data-transition="zoom">
                <p><u>Definition:-</p>
                <p>In computer programming languages, a switch statement is a type of selection control mechanism used to
                    allow the value of a variable or expression to change the control flow of program execution via search
                    and map.</p>
            </section>
    
            <!-- slide 5 content -->
            <section data-auto-animate data-transition="zoom">
    
                <p>Why we use Switch Statement...?</p>
                <ul>
                    <li>Switch statements are used when you clearly know what are possible values for the condition variable
                    </li>
                    <li>Each value in that list of possible value is called case.</li>
                    <li>When the value given in input matches the value in the case statement, the block of code below case
                        gets executed.</li>
                </ul>
            </section>
    
            <!-- slide 5 content -->
            <section data-auto-animate data-transition="zoom">
                <p><u>Syntax:-</p>
                <img
                    src="https://codeforwin.org/ezoimgfmt/secureservercdn.net/160.153.138.219/b79.d22.myftpupload.com/wp-content/uploads/2017/09/how-break-works-with-switch-statement.png?ezimgfmt=rs:270x289/rscb1">
            </section>
    
            <!-- slide 6 content -->
            <section data-auto-animate data-transition="zoom">
                <p><u>Flowchart:-</p>
                <img
                    src="https://secureservercdn.net/160.153.138.219/b79.d22.myftpupload.com/wp-content/uploads/2017/09/break-statement-flowchart.png">
            </section>
    
            <!-- slide 7 content -->
            <section data-auto-animate data-transition="zoom">
                <p><u>Program to switch Statement</p>
                <pre>
        <code data-trim data-noescape>
    #include&lt;stdio.h&gt;
     
    int main () {
       char grade = 'B';
    
       switch(grade) {
          case 'A' :
             printf("Excellent!\n" );
             break;
          case 'B' :
          printf("Good!\n" );
             break;
          case 'C' :
             printf("Well done\n" );
             break;
          case 'D' :
             printf("You passed\n" );
             break;
          case 'F' :
             printf("Better try again\n" );
             break;
          default :
             printf("Invalid grade\n" );
       }
       
       printf("Your grade is  %c\n", grade );
     
       return 0;
    }
    
        </code>
    </pre>
            </section>
    
            <!-- slide 8 content -->
            <section data-auto-animate data-transition="zoom">
                <h2>
                    <p>
                        Tips and Traps
                    </p>
                </h2>
            </section>
    
            <!-- slide 9 content -->
            <section data-auto-animate data-transition="zoom">
                <ul>
                    <li>The program in the previous section may give you an impression that cases in a switch must be
                        arranged in ascending order â€“ 1,2,3 and default. In fact, you can put the cases in any order you
                    </li>
                    <li>You are also allowed to use char values in case and switch</li>
                    <li>At times we may want to execute a common set of statements for multiple cases. </li>
                    <li>Even if there are multiple statements to be executed in each case, there is no need to enclose them
                        within a pair of braces.</li>
                </ul>
            </section>
    
            <!-- slide 10 content -->
            <section data-auto-animate data-transition="zoom">
                <ul>
                    <li>If we have no default case, and no case is satisfied, then the control simply falls through the
                        entire switch and continues with the next instruction(if any,) that follows the closing brace of
                        switch.</li>
                    <li>we can check the value of any expression in a switch. Thus, the following switch statements are
                        legal:</li>
                    <ul>
                        <li>switch(i + j * k)</li>
                        <li>switch(23+45%4*k)</li>
                        <li>switch(a&lt;4&&b&gt;7)</li>
                    </ul>
                </ul>
            </section>
    
            <!-- slide 11 content -->
            <section data-auto-animate data-transition="zoom">
                <ul>
                    <li>Every statement in a switch must belong to some case or the other.</li>
                    <li>The break statement when used in a switch takes the control outside the switch. However, use of
                        continue will not take the control to the beginning of switch</li>
                    <li>The switch statement is very useful while writing menu driven programs. Let us discuss it later, in
                        the end of this chapter.</li>
                </ul>
            </section>
    
            <!-- slide 3 content -->
            <section data-auto-animate data-transition="zoom">
                <h2>
                    <p>
                        Switch versus if-else
                    </p>
                </h2>
            </section>
    
            <!-- slide 12 content -->
            <section data-auto-animate data-transition="zoom">
                <ul>
                    <li>There are some things that you simply cannot do with a switch.</li>
                    <li>They are:-</li>
                    <ul>
                        <li>A float expression cannot be tested using a switch.</li>
                        <li>Cases can never have variable expressions as in case a+3:</li>
                        <li>Multiple cases cannot use same expressions.For example, Case3 & Case1+2</li>
                    </ul>
                </ul>
            </section>
    
            <!-- slide 13 content -->
            <section data-auto-animate data-transition="zoom">
                <ul>
                    <li>From the above three statements,we believe that these are disadvantages with a switch.</li>
                    <li>But in if-else statement we dont have such limitations.</li>
                    <li>Then why use a switch at all? For speed -switch works faster than an equivalent if-else ladder.</li>
                </ul>
            </section>
    
            <!-- slide 14 content -->
            <section data-auto-animate data-transition="zoom">
                <ul>
                    <li>This is because compiler generates a jump table for a switch during compilation.</li>
                    <li>As a result, during execution, it simply refers the jump table to decide which case should be
                        executed.</li>
                    <li>Instead of checking which case is satisfied.</li>
                    <li>But in the if-else statement, it slower because the conditions in them are evaluated at execution
                        time. </li>
                </ul>
            </section>
    
            <!-- slide 15 content -->
            <section data-auto-animate data-transition="zoom">
                <h2>
                    <p>
                        The goto keyword
                    </p>
                </h2>
            </section>
    
            <!-- slide 16 content -->
            <section data-auto-animate data-transition="Zoom">
                <p><u>DEFINITION</p>
                <ul>
                    <li>
                        <p>The goto statement is a jump statement which is sometimes also referred to as unconditional
                            jump
                            statement. The goto statement can be used to jump from anywhere to anywhere within a
                            function.
                        </p>
                    </li>
                </ul>
            </section>
            <!-- slide 18 content -->
            <section data-auto-animate data-transition="zoom">
                <p><u>Syntax of goto</p>
                <img src="https://www.decodejava.com/c-goto-statement.jpg">
            </section>
    
            <!-- slide 17 content -->
            <section data-auto-animate data-transition="zoom">
                <p><u>Difference Between Forward Jump & Backward Jump </p>
                <img src="http://www.trytoprogram.com/wp-content/uploads/goto.jpg">
            </section>
    
            <!-- slide 19 content -->
            <section data-auto-animate data-transition="zoom">
                <p>Simple program using goto statement</p>
                <pre>
                    <code data-trim data-noescape>
                        #include &lt;stdio.h&gt;
                            int main()
                            {
                               int sum=0;
                               for(int i = 0; i&lt;=10; i++){
                                sum = sum+i;
                                if(i==5){
                                   goto addition;
                                }
                               }
                            
                               addition:
                               printf("%d", sum);
                            
                               return 0;
                            }  
                    </code>
                </pre>
            </section>
    
            <!-- slide 22 content -->
            <section data-auto-animate data-transition="zoom">
                <p><u>Some Disadvantages of goto statement</p>
                <ul>
                    <li>Avoid goto keyword! Because,It use is one of the reasons that programs become hard to debug.</li>
                    <li>In a difficult programming situation, it seems easy to use a goto to take the control where you
                        want.</li>
                    <li>The big problem with goto keyword is that when we do use it we can never be sure how we got to a
                        certain point in our code.</li>
                    <li></li>
                </ul>
            </section>
    
            <!-- slide 23 content -->
            <section data-auto-animate data-transition="zoom">
                <ul>
                    <li>It obscures the flow of control.</li>
                    <li>So as far as possible skip it.</li>
                    <li>In good programming skills, goto can always be avoided.</li>
                </ul>
            </section>
    
            <!-- slide 20 content -->
            <section data-auto-animate data-transition="zoom">
                <img
                    src="https://images.pexels.com/photos/2072165/pexels-photo-2072165.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=650&w=940">
            </section>
        </div>
  