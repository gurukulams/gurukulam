---
title: 'Loop control Instructions'
date: 2018-11-14T19:02:50-07:00
draft: false
---

<div class="slides">
    <!-- slide 1 content -->
    <section data-auto-animate data-transition="convex">
        <h2>
            <p>
                Loop control Instructions
            </p>
        </h2>
    </section>

    <!-- slide 2 content -->
    <section data-auto-animate data-transition="convex">
        <h3><b>Introduction</b></h3>
        <ul>
            <li>The programs which we seen so far used either a sequential or a decision control instruction.
            </li>
            <li>Now we are going to see about new concept called Loops.</li>
            <li>These programs are always performed the same series of actions,in the same way,exactly once.</li>
        </ul>
    </section>

    <!-- slide 3 content -->
    <section data-auto-animate data-transition="convex">
        <h4>Continues...</h4>
        <ul>
            <li>In programming,we frequently perform an action over and over,often with some variations.</li>
            <li>The mechanisim which meets this need is the "LOOP CONTROL INSTRUCTION"</li>
            <li>Now, we are going to see about Loop Control in this chapter.</li>
        </ul>
    </section>

    <!-- slide 4 content -->
    <section data-auto-animate data-transition="convex">
        <h2> What is Loop......? </h2>
    </section>

    <!-- slide 5 content -->
    <section data-auto-animate data-transition="convex">
        <video data-autoplay
            src="https://media.istockphoto.com/videos/footage-of-giant-ferris-wheel-with-colorful-firework-festival-in-the-video-id1027513390">
        </video>
        <video data-autoplay
            src="https://static.videezy.com/system/resources/previews/000/047/479/original/Merry-go-round.mp4">
        </video>
    </section>

    <!-- slide 6 content -->
    <section data-auto-animate data-transition="convex">
        <h4> Loop</h4>
        <ul>
            <li>The versatility of computer lies in its ability to perform a set of instructions repeatedly</li>

            <li>This involves repeating some portion of the program either a specified number of times or until a
                particular condition is satisfied</li>
            <li>This repetitive operation is done through a loop control instruction</li>
        </ul>
    </section>

    <!-- slide 7 content -->
    <section data-auto-animate data-transition="convex">
        <h3><b>Types of loop</b></h3>
        <ul>
            <li>There are three ways to repeat a part of a program.</li> <br>
            <li>They are:-</li>
            <ul>
                <li>Using a while statement</li>
                <li>Using a for statement</li>
                <li>Using a do-while statement</li>
            </ul>
        </ul>
    </section>

    <!-- slide 8 content -->
    <section data-auto-animate data-transition="convex">
        <h4><b>What is while loop?</b></h4>
        <h7>
            <ul>
                <li>While loop is also known as a pre-tested loop.</li>
                <li>A while loop allows a part of the code to be executed multiple times depending upon
                    a given boolean condition.</li>
                <li>In this While loop, it First check the given condition.</li>
                <li>If the condition is true, then the statements are executed and the loop executes again and again
                    until the condition is false.</li>
                <li>If it is false the loop is finished without executing the statement(s).</li>
            </ul>
        </h7>
    </section>

    <!-- slide 9 content -->
    <section data-auto-animate data-transition="convex">
        <h3><u>
                <c>Syntax</c>
            </u></h3>
        <img
            src="https://4.bp.blogspot.com/-aPKHuge-Wrg/XHV3SvyUvfI/AAAAAAAAERc/vJ4wYpr5Esgr3CBq-S8NkV-JyvPgoSHIACLcBGAs/s1600/while%2Bloop.png">
    </section>

    <!-- slide 10 content -->
    <section data-auto-animate data-transition="convex">
        <h3><u>
                <c>Flowchart</c>
            </u></h3>
        <img src="https://beginnersbook.com/wp-content/uploads/2017/09/while_loop_C.jpg">
    </section>

    <!-- slide 11 content -->
    <section data-auto-animate data-transition="convex">
        <h3><u><b>Calculation of simple interest</b></u></h3>
        <pre>
    <code data-trim data-noescape>
            int main()
            {
                int p, n, count;
                float r, si;
                count = 5;
                while (count >= 3)
                {
                    printf("\n Enter values of p, n and r");
                    scanf("%d%d%f", &p, &n, &r);
                    si = p * n * r / 100;
                    printf("Simple interest = Rs.%f", si);
                    count = count - 1;
                }
                return 0;
            }     
    </code>
        </pre>
    </section>

    <!-- slide 12 content -->
    <section data-auto-animate data-transition="convex">
        <ul>
            <li>The program executes all statements 3 times</li>

            <li>The logic for calculating the simple interest is written in these statements and they are enclosed
                within a pair of braces</li>
            <li>These statements form the ‘body’ of the while loop.</li>
            <li>The parentheses after the while contain a condition.</li>

        </ul>
    </section>

    <!-- slide 13 content -->
    <section data-auto-animate data-transition="convex">
        <ul>
            <li>So long as this condition remains true, the statements in the body of the while loop keep getting
                executed repeatedly</li>
            <li>To begin with,the variable count is initialized to 5 and every time the simple interest logic is
                executed, the value of count is decremented by one</li>
            <li>The variable count is often called either a ‘loop counter’ or an ‘index variable’</li>
        </ul>
    </section>

    <!-- slide 14 content -->
    <section data-auto-animate data-transition="convex">
        <h3> Tips and Traps</h3>
        <ul>
            <li>The general form of while is as shown below</li>
            <li>Initialize loop counter;</li>
            <li>While(test loop counter using a condition)</li>
        </ul>
    </section>

    <!-- slide 15 content -->
    <section data-auto-animate data-transition="convex">
        <h3>
            <p><u>Statement Block of the While Loop</u></p>
            <pre>
        <code data-trim data-noescape>
                {
                  do this;
                  and this;
                  increment loop counter;
                }
            </code>
        </pre>
        </h3>
    </section>

    <!-- slide 16 content -->
    <section data-auto-animate data-transition="convex">
        <p>Note the following points about while………</p>
        <ul>
            <li>The statements within the while loop would keep getting executed till the condition being tested
                remains true.</li>
            <li>When the condition becomes false, the control passes to the first statement that follows the body
                of the while loop.</li>
            <li>In place of the condition,there can be any other valid expression.So long as the expression
                evaluates to a non-zero value, the statements within the loop would get executed.</li>
        </ul>
    </section>

    <!-- slide 17 content -->
    <section data-auto-animate data-transition="convex">
        <p><u>The condition being tested may use relational or logical operators as shown in the following
                ex:</u></p>
        <pre>
        <code data-trim data-noescape>
            while(i>=10)
            while(i>=10 && j>=15)
            while(j>10 && (b>15|| c>20))
            </code>
        </pre>
        <p>The statements within the loop may consist a single line or a block of statements. In the first case,
            the braces are optional.</p>
    </section>

    <!-- slide 18 content -->
    <section data-auto-animate data-transition="convex">
        <p>Almost always, the while must test a condition that will eventually become false, otherwise the loop
            would keep getting executed forever, indefinitely.</p>
        <pre>
        <code data-trim data-noescape>
            int main()
            {
              int i=15;
              while (i>=10)
              {
                printf(“%d\n”,i);
              }
                return 0;
            }
            </code>
        </pre>
        <ul>
            <li>This is an indefinite loop, since I always remains equal to 15.</li>
        </ul>
    </section>

    <!-- slide 19 content -->
    <section data-auto-animate data-transition="convex">
        <p>The correct form would be as under:</p>
        <pre>
        <code data-trim data-noescape>
        int main()
        {
           int i=1;
            while (i&lt;=10)
            {
                printf(“%d\n”,i);
                i=i+1;
            }       
            return 0;
        }
            </code>
        </pre>
    </section>

    <!-- slide 20 content -->
    <section data-auto-animate data-transition="convex">
        <ul>
            <li>Instead of increasing a loop counter,we can decrement it and still manage to get the body of the
                loop executed repeatedly.</li>
            <li>It is not necessary that a loop counter must only be an int.it can even be a float.</li>
            <li>Even floating point loop counters can be decremented.once again,the increment and decrement could be
                by any value,not necessarily</li>
        </ul>
    </section>

    <!-- slide 21 content -->
    <section data-auto-animate data-transition="convex">
        <p>What will be the output of the following program:</p>
        <pre>
        <code data-trim data-noescape>
            int main()
            {
                int i=15;
                while i>=10.5);
                {
                    printf("%d\n",i);
                    i=i+1;
                }
                return 0;
            }
            </code>
        </pre>
        <p>This is an indefinite loop, and it doesn’t give any output at all. The reason is, we have careless put
            a;after the while.</p>
    </section>

    <!-- slide 22 content -->
    <section data-auto-animate data-transition="convex">
        <h2>
            <p>
                More Operators
            </p>
        </h2>
    </section>

    <!-- slide 23 Content --->
    <section data-auto-animate data-transition="convex">
        <ul>
            <li>There are several operators that are frequently used with while.</li>
        </ul>
        <p>The program to written the numbers from 10 to 1, using while in following different ways:</p>
        <pre>
        <code data-trim data-noescape>
    (a)
            int main()
            {
                int i=10;
                while ( i>=1);
                {
                    printf(“%d\n”, i);
                    i=i-1;
                }
                return 0;
            }
            </code>
        </pre>
        <p>This is the most straight-forward way of printing numbers from 10 to 1.</p>
    </section>

    <!-- slide 24 Content --->
    <section data-auto-animate data-transition="convex">
        <ul>
            <li>In the previous program instead of giving i=i-1, here we are going to use decrement operator(i=i--).
            </li>
            <li>Note that the decremet operator -- decrements the value of i by 1, every time the statement i-- gets
                executed.</li>
            <li>Similarly, to increase the value of a variable by 1, a increment operator ++ is also available.</li>
            <li>However, never use n+++ to increment the value of n by 2, since there doesn’t exist an operator +++
                in c.</li>
        </ul>
    </section>

    <!-- slide 25 Content --->
    <section data-auto-animate data-transition="convex">
        <pre>
        <code data-trim data-noescape>
(c)
     int main()
    {
    int i=1;
    while (i&lt;=10);
     {
        printf(“%d\n”,i);
        i +=1;
     }
    return 0;
    }
      </code>
        </pre>
    </section>

    <!-- slide 26 Content --->
    <section data-auto-animate data-transition="convex">
        <ul>
            <li>Note that += is a compound assignment operator.</li>
            <li>It increments the value of i by 1.</li>
            <li>Similarly, j=j+10 can also be written as j+=10.other compound assignment operators are -=,*=,/= and
                %=.</li>
        </ul>
    </section>

    <!-- slide 27 Content --->
    <section data-auto-animate data-transition="convex">
        <pre>
        <code data-trim data-noescape>
        (d)
            int main()
            {
            int i=0;
            while ( i++&lt;10 )
            {
            printf(“%d\n”,i);
            }
            return 0;
            }
        </code>
        </pre>
    </section>

    <!-- slide 28 Content --->
    <section data-auto-animate data-transition="convex">
        <ul>
            <li> In the while statement, first the comparison of value of i with 10 is performed, and then the
                incrementation of i takes place.</li>
            <li>Since the incrementation of i happens after the comparison, here the ++
                operator is called a post – incrementation operator.</li>
            <li>When the control reaches printf(), i has already
                been incremented, hence i must be initialized to 0, not 1.</li>
        </ul>
    </section>
    <!-- slide 29 Content --->
    <section data-auto-animate data-transition="convex">
        <pre>
        <code data-trim data-noescape>
        (e)
        int main()
        {
            int i=0;
            while ( ++i&lt;=10 )
            {
                printf(“%d\n”,i);
            }
            return 0;
        }
        </code>
        </pre>
    </section>

    <!-- slide 30 Content --->
    <section data-auto-animate data-transition="convex">
        <ul>
            <li>In the while statement,first incrementation of i takes place, then the comparison of value of i with
                10 is performed.</li>
            <li>Since the incrementation of i happens before the comparison, here the ++ operator is called a
                pre-incrementation operator.</li>
        </ul>
    </section>

    <!-- slide 31 Content --->
    <section data-auto-animate data-transition="convex">
        <img src="https://www.itl.cat/pngfile/big/112-1125365_hd-images-photo-pics-wallpaper-pic-for-thank.jpg">
    </section>

</div>