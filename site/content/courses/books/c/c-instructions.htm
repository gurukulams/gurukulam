---
title: 'C Instructions'
date: 2018-11-14T19:02:50-07:00
draft: false
---

<div class="slides">
    
    <!-- slide 1 content -->

    <section data-auto-animate data-transition="convex">
        <h3>C Instructions</h3>
    </section>

    <!-- slide 2 content -->
    <section data-auto-animate data-transition="convex">
        <ul>
            <li>C instructions are the commands in the program that instructs the compiler to do certain action.
            </li>
            <li>Basically it gives the instruction to the compiler on how to achieve the goal of the program.</li>
            <li>For example, when we add two numbers, the C compiler will not understand how to do it.</li>
            </li>But if we write the same in terms of code / command using arithmetic operator ‘+’ and numbers or
            variables, it gives meaningful information to the compiler on how to get the sum.</li>
        </ul>
    </section>

    <!-- slide 2 content -->
    <section data-auto-animate data-transition="convex">
        <h3>Types of Instructions</h3>
    </section>

    <!-- slide 2 content -->
    <section data-auto-animate data-transition="convex">
        <ul>
            <li>There are basically three types of instructions in C:</li>
            <ul>
                <li>Type Declaration Instruction – To declare the type of variables used in a C program.</li>
                <li>Arithmetic Instruction – To perform arithmetic operations between constants and variables.</li>
                <li>Control Instruction – To control the sequence of execution of various statements in a C program.
                </li>
            </ul>
        </ul>
    </section>

    <!-- slide 2 content -->
    <section data-auto-animate data-transition="convex">
        <h3>Type Declaration Instructions</h3>
    </section>

    <!-- slide 2 content -->
    <section data-auto-animate data-transition="convex">
        <ul>
            <li>These instructions inform the compiler about the type of variables used.</li>
            <li>That means, whenever a variable is used in the program, we have to specify what types of data it can
                hold – like integer, float, double, character etc.</li>
            <li>This makes the compiler to store only those specific types of values in it.</li>
        </ul>
    </section>

    <!-- slide 2 content -->
    <section data-auto-animate data-transition="convex">
        <ul>
            <li>For example, a variable intVar1 declared as int will accept and store only integer values.</li>
            <li>It will never accept float or character values.</li>
            <li>Declaration of variable is done at the beginning, inside the main function.</li>
            <li>This function is the starting point of any C program and all the variables used with main function
                needs
                to be declared at the beginning of it, before using it in the function.</li>
            <li>Any other functions in the program can also have variables and they needs to be declared at the
                beginning of respective functions.</li>
        </ul>
    </section>

    <!-- slide 2 content -->
    <section data-auto-animate data-transition="convex">
        <ul>
            <li><u><b>For Example</b></li>
            <ul>
                <li>int a;</li>
                <li> When we declare any variable at that time we are also eligible to initialize this variable.
                </li>
                <ul>
                    <li> int i=5,j=7;</li>
                    <li>float a=5.5;</li>
                </ul>
                <li>when we declare and initialize variables together the issue of ordering occurs. Sometime order
                    of declaration matters and sometime not.</li>
                <ul>
                    <li>int i=10,j=25;</li>
                    <li>float b=a+3.1,a=1.5;</li>
                </ul>
            </ul>
        </ul>
    </section>

    <!-- slide 2 content -->
    <section data-auto-animate data-transition="convex">
        <h3>Arithmetic Instruction</h3>
    </section>

    <!-- slide 2 content -->
    <section data-auto-animate data-transition="convex">
        <ul>
            <li>An Arithmetic instruction consists of a variable name on the left hand side of equal to(=) and
                variable names & constants on the right hand side of equal to(=).</li>
            <li>The variables and constants appearing on the right hand side of equal to(=) are connected by
                arithmetic operators like +, -, *, and /.</li>
            <li>For Example:-</li>
            <ul>
                <li>Sum=10+20+30;</li>
                <li>avg = ( a + b + c + num ) / 4 ;</li>
            </ul>
        </ul>
    </section>

    <!-- slide 2 content -->
    <section data-auto-animate data-transition="convex">
        <h3>Types of Arithmetic Instructions</h3>
    </section>

    <!-- slide 2 content -->
    <section data-auto-animate data-transition="convex">
        <img
            src="http://4.bp.blogspot.com/-ATb3639X66U/VfBGx7X2_SI/AAAAAAAAAjk/z7C3k-UhN-E/s400/Arithmetic%2Binstruction%2Bin%2Bc.png">
    </section>

    <!-- slide 2 content -->
    <section data-auto-animate data-transition="convex">
        <h3>Control Instruction</h3>
    </section>

    <!-- slide 2 content -->
    <section data-auto-animate data-transition="convex">
        <ul>
            <li>The ‘Control Instructions’ enable us to specify the order in which the various instructions in a
                program are to be executed by the computer.</li>
            <li>In other words the control instructions determine the ‘flow of control’ in a program.</li>
            <li>There are four types of control instructions in C. They are:-</li>
            <ul>
                <li>Sequence Control Instruction</li>
                <li>Selection or Decision Control Instruction</li>
                <li>Repetition or Loop Control Instruction</li>
                <li>Case Control Instruction</li>
            </ul>
        </ul>
    </section>

    <!-- slide 2 content -->
    <section data-auto-animate data-transition="convex">
        <img
            src="https://i0.wp.com/www.wishesquotesimages.com/wp-content/uploads/2019/01/beautiful-thank-u-hd-image.jpg?resize=768%2C432">
    </section>

</div>